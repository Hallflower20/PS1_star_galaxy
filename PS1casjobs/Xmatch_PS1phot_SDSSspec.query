/*This Query is designed to match photometric properties of 
PS1 sources with SDSS spectroscopic sources */

-- Query 1 [To be run on SDSS DR14]
SELECT specobjid, ra, dec, class, sourceType, z, cModelMag_r, cModelMag_g - cModelMag_i as gminusi into mydb.sdssSpecPhoto
from specphoto


-- Query 2 [Create table to upload SDSS data]
create table sdssSpecPhoto_DR14
    (specobj_idx int,
    ra float,
    dec float,
    class varchar(32),
    sourceType varchar(128),
    z float,
    cModelMag_r float,
    gminusi float,
    type smallint,
    countRatio float)

-- Query 3 [populate intermediate table with counts in filters]
SELECT 
s.bestobjID, s.specobjid, s.ra, s.dec, 
s.class, s.sourceType, s.z, 
cModelMag_r, cModelMag_g - cModelMag_i as gminusi, p.type, 

psfFlux_u/nMgyPerCount_u as psfCount_u, 
cmodelFlux_u/nMgyPerCount_u as cmodelCount_u,  
CASE 
    WHEN ( ((flags_u & (dbo.fPhotoFlags('BINNED1')
                     | dbo.fPhotoFlags('BINNED2') 
                     | dbo.fPhotoFlags('BINNED4')) ) > 0) AND 
           ((flags_u & (dbo.fPhotoFlags('DEBLEND_NOPEAK')
                     | dbo.fPhotoFlags('INTERP_CENTER'))) = 0)
                     )
    THEN 1 ELSE 0
END as det_u,

psfFlux_g/nMgyPerCount_g as psfCount_g, 
cmodelFlux_g/nMgyPerCount_g as cmodelCount_g, 
CASE 
    WHEN ( ((flags_g & (dbo.fPhotoFlags('BINNED1')
                     | dbo.fPhotoFlags('BINNED2') 
                     | dbo.fPhotoFlags('BINNED4')) ) > 0) AND 
           ((flags_g & (dbo.fPhotoFlags('DEBLEND_NOPEAK')
                     | dbo.fPhotoFlags('INTERP_CENTER'))) = 0)
                     )
    THEN 1 ELSE 0
END as det_g,

psfFlux_r/nMgyPerCount_r as psfCount_r, 
cmodelFlux_r/nMgyPerCount_r as cmodelCount_r, 
CASE 
    WHEN ( ((flags_r & (dbo.fPhotoFlags('BINNED1')
                     | dbo.fPhotoFlags('BINNED2') 
                     | dbo.fPhotoFlags('BINNED4')) ) > 0) AND 
           ((flags_r & (dbo.fPhotoFlags('DEBLEND_NOPEAK')
                     | dbo.fPhotoFlags('INTERP_CENTER'))) = 0)
                     )
    THEN 1 ELSE 0
END as det_r,

psfFlux_i/nMgyPerCount_i as psfCount_i, 
cmodelFlux_i/nMgyPerCount_i as cmodelCount_i, 
CASE 
    WHEN ( ((flags_i & (dbo.fPhotoFlags('BINNED1')
                     | dbo.fPhotoFlags('BINNED2') 
                     | dbo.fPhotoFlags('BINNED4')) ) > 0) AND 
           ((flags_i & (dbo.fPhotoFlags('DEBLEND_NOPEAK')
                     | dbo.fPhotoFlags('INTERP_CENTER'))) = 0)
                     )
    THEN 1 ELSE 0
END as det_i,

psfFlux_z/nMgyPerCount_z as psfCount_z, 
cmodelFlux_z/nMgyPerCount_z as cmodelCount_z, 
CASE 
    WHEN ( ((flags_z & (dbo.fPhotoFlags('BINNED1')
                     | dbo.fPhotoFlags('BINNED2') 
                     | dbo.fPhotoFlags('BINNED4')) ) > 0) AND 
           ((flags_z & (dbo.fPhotoFlags('DEBLEND_NOPEAK')
                     | dbo.fPhotoFlags('INTERP_CENTER'))) = 0)
                     )
    THEN 1 ELSE 0
END as det_z
  into mydb.sdssSpecPhotoCounts_DR14
  from specObj s left join photoPrimary p ON s.bestobjid = p.objid
ORDER BY bestObjID

-- Query 4 [calculate the SDSS countRatio]
SELECT 
    specobjid, ra, dec, 
    class, sourceType, z, 
    cModelMag_r, gminusi, type, 
    COALESCE( (det_u*psfCount_u + det_g*psfCount_g + 
               det_r*psfCount_r + det_i*psfCount_i + 
               det_z*psfCount_z) / 
               NULLIF( (det_u*cmodelCount_u + det_g*cmodelCount_g + 
               det_r*cmodelCount_r + det_i*cmodelCount_i + 
               det_z*cmodelCount_z), 
                     0), 0
             ) as countRatio
    from mydb.sdssSpecPhotoCounts_DR14
    into mydb.sdssSpecPhoto_DR14
    ORDER BY bestObjID


/* Once the SDSS spectroscopic sources are identified, the 
    corresponding output needs to be downloaded and then 
    loaded into the PS1 Casjobs interface */

-- Query 5; PS1 db cannot crossmatch 3.5M sources, so queries are needed to create smaller tables

select top 1077893 * from sdssSpecPhoto_DR14
into mydb.sdssSpecPhoto1_DR14
order by specobj_idx asc

SELECT top 1077893  *
FROM (
        SELECT TOP 2155786 *
       FROM sdssSpecPhoto_DR14
        ORDER BY specobj_idx asc
     )T into mydb.sdssSpecPhoto2_DR14
ORDER BY specobj_idx desc

SELECT TOP 1077893 *
FROM (
        SELECT top 3233679 *
       FROM sdssSpecPhoto_DR14
        ORDER BY specobj_idx asc
     )T into mydb.sdssSpecPhoto3_DR14
ORDER BY specobj_idx desc

select top 1077892 * from sdssSpecPhoto_DR14
into mydb.sdssSpecPhoto4_DR14
order by specobj_idx desc

-- Query 6 [To be run on PanSTARRS_DR1]
select s.specobj_idx, o.objID
into MyDB.Xmatch1
from MyDB.sdssSpecPhoto1_DR14 s
cross apply fGetNearestObjEq(s.ra,s.dec,1.0/60.0) nb
inner join ObjectThin o on o.objid=nb.objid 

select s.specobj_idx, o.objID 
into MyDB.Xmatch2
from MyDB.sdssSpecPhoto2_DR14 s
cross apply fGetNearestObjEq(s.ra,s.dec,1.0/60.0) nb
inner join ObjectThin o on o.objid=nb.objid 

select s.specobj_idx, o.objID 
into MyDB.Xmatch3
from MyDB.sdssSpecPhoto3_DR14 s
cross apply fGetNearestObjEq(s.ra,s.dec,1.0/60.0) nb
inner join ObjectThin o on o.objid=nb.objid 

select s.specobj_idx, o.objID 
into MyDB.Xmatch4
from MyDB.sdssSpecPhoto4_DR14 s
cross apply fGetNearestObjEq(s.ra,s.dec,1.0/60.0) nb
inner join ObjectThin o on o.objid=nb.objid 

/* Self-matching a table with 1M rows 3 times within casjobs does not appear
to be possible within the 12 hr queue limit imposed on casjobs. Instead, I have
split the steps necessary to grab features for the SDSS spectroscopic sample
into 2 queries.
*/

-- Query 7 [To be run on PanSTARRS_DR1]

select sov.objid, 
      (case when (sov.gpsfMajorFWHM > 0 and sov.gpsfMinorFWHM > 0)
          then (sov.gpsfMajorFWHM + sov.gpsfMinorFWHM)/2 else 1e8 end) as gSeeing,
      (case when (sov.rpsfMajorFWHM > 0 and sov.rpsfMinorFWHM > 0)
          then (sov.rpsfMajorFWHM + sov.rpsfMinorFWHM)/2 else 1e8 end) as rSeeing,
      (case when (sov.ipsfMajorFWHM > 0 and sov.ipsfMinorFWHM > 0)
          then (sov.ipsfMajorFWHM + sov.ipsfMinorFWHM)/2 else 1e8 end) as iSeeing,
      (case when (sov.zpsfMajorFWHM > 0 and sov.zpsfMinorFWHM > 0)
          then (sov.zpsfMajorFWHM + sov.zpsfMinorFWHM)/2 else 1e8 end) as zSeeing,
      (case when (sov.ypsfMajorFWHM > 0 and sov.ypsfMinorFWHM > 0)
          then (sov.ypsfMajorFWHM + sov.ypsfMinorFWHM)/2 else 1e8 end) as ySeeing,
      (case when (sov.gPSFFlux > 0 AND sov.gKronFlux > 0 AND sov.gApFlux > 0) 
             then power(sov.gPSFFlux,2)/power(sov.gPSFFluxErr,2) else 0 end) as gPSFWeight, 
       (case when (sov.rPSFFlux > 0 AND sov.rKronFlux > 0 AND sov.rApFlux > 0) 
             then power(sov.rPSFFlux,2)/power(sov.rPSFFluxErr,2) else 0 end) as rPSFWeight,
       (case when (sov.iPSFFlux > 0 AND sov.iKronFlux > 0 AND sov.iApFlux > 0) 
             then power(sov.iPSFFlux,2)/power(sov.iPSFFluxErr,2) else 0 end) as iPSFWeight,
       (case when (sov.zPSFFlux > 0 AND sov.zKronFlux > 0 AND sov.zApFlux > 0) 
             then power(sov.zPSFFlux,2)/power(sov.zPSFFluxErr,2) else 0 end) as zPSFWeight,
       (case when (sov.yPSFFlux > 0 AND sov.yKronFlux > 0 AND sov.yApFlux > 0) 
             then power(sov.yPSFFlux,2)/power(sov.yPSFFluxErr,2) else 0 end) as yPSFWeight, 
       (case when (sov.gPSFFlux > 0 AND sov.gKronFlux > 0 AND sov.gApFlux > 0) 
             then power(sov.gKronFlux,2)/power(sov.gKronFluxErr,2) else 0 end) as gKronWeight, 
       (case when (sov.rPSFFlux > 0 AND sov.rKronFlux > 0 AND sov.rApFlux > 0) 
             then power(sov.rKronFlux,2)/power(sov.rKronFluxErr,2) else 0 end) as rKronWeight,
       (case when (sov.iPSFFlux > 0 AND sov.iKronFlux > 0 AND sov.iApFlux > 0) 
             then power(sov.iKronFlux,2)/power(sov.iKronFluxErr,2) else 0 end) as iKronWeight,
       (case when (sov.zPSFFlux > 0 AND sov.zKronFlux > 0 AND sov.zApFlux > 0) 
             then power(sov.zKronFlux,2)/power(sov.zKronFluxErr,2) else 0 end) as zKronWeight,
       (case when (sov.yPSFFlux > 0 AND sov.yKronFlux > 0 AND sov.yApFlux > 0) 
             then power(sov.yKronFlux,2)/power(sov.yKronFluxErr,2) else 0 end) as yKronWeight,
       (case when (sov.iPSFFlux > 0 AND sov.iKronFlux > 0 AND sov.iApFlux > 0) 
             then 1 else null end) as iDet
into mydb.intermediate1
from 
(select sov.objid 
    from stackobjectview as sov
join mydb.Xmatch1 x on sov.objid = x.objid
where sov.primaryDetection = 1
group by sov.objid
having count(sov.objid) = 1) s join stackobjectview as sov on s.objid = sov.objid
where sov.primaryDetection = 1

-- Query 8 [To be run on PanSTARRS_DR1]

select *, 
(wwPSFFlux - (0.91375*wwKronFlux))/sqrt(1 + power(0.91375,2)) as wwPSFKronDist,
wwPSFFlux/wwApFlux as wwPSFApRatio,
wwPSFFlux/wwKronFlux as wwPSFKronRatio
into mydb.sdssSP1_MLfeats
from 
(select sdss.class, 
    sdss.sourceType, sdss.z, sdss.cModelMag_r, sdss.gminusi, 
    sdss.type, sdss.countRatio,
        sov.objid, sov.raStack, sov.decStack, sov.nDetections, sov.qualityFlag, 
        (sov.iPSFMag - sov.iKronMag)*iKronWeight/nullif(iKronWeight,0) as iPSFminusKron,       
       (sov.gPSFFlux*gPSFWeight + sov.rPSFFlux*rPSFWeight + sov.iPSFFlux*iPSFWeight +
        sov.zPSFFlux*zPSFWeight + sov.yPSFFlux*yPSFWeight)/nullif(
        gPSFWeight + rPSFWeight + iPSFWeight + zPSFWeight + yPSFWeight, 0)
        as wwPSFFlux,
       (sov.gKronFlux*gKronWeight + sov.rKronFlux*rKronWeight + sov.iKronFlux*iKronWeight +
        sov.zKronFlux*zKronWeight + sov.yKronFlux*yKronWeight)/nullif(
        gKronWeight + rKronWeight + iKronWeight + zKronWeight + yKronWeight, 0)
        as wwKronFlux, 
       (sov.gApFlux*gPSFWeight + sov.rApFlux*rPSFWeight + sov.iApFlux*iPSFWeight +
        sov.zApFlux*zPSFWeight + sov.yApFlux*yPSFWeight)/nullif(
        gPSFWeight + rPSFWeight + iPSFWeight + zPSFWeight + yPSFWeight, 0)
        as wwApFlux,
       (sov.gExtNSigma*gKronWeight + sov.rExtNSigma*rKronWeight + sov.iExtNSigma*iKronWeight +
        sov.zExtNSigma*zKronWeight + sov.yExtNSigma*yKronWeight)/nullif(
        gKronWeight + rKronWeight + iKronWeight + zKronWeight + yKronWeight, 0)
        as wwExtNSigma,
       (sov.gmomentYY/power(gSeeing, 2)*gKronWeight + 
        sov.rmomentYY/power(rSeeing, 2)*rKronWeight + 
        sov.imomentYY/power(iSeeing, 2)*iKronWeight +
        sov.zmomentYY/power(zSeeing, 2)*zKronWeight + 
        sov.ymomentYY/power(ySeeing, 2)*yKronWeight)/nullif(
        gKronWeight + rKronWeight + iKronWeight + zKronWeight + yKronWeight, 0)
        as wwmomentYY,
       (sov.gmomentXY/power(gSeeing, 2)*gKronWeight + 
        sov.rmomentXY/power(rSeeing, 2)*rKronWeight + 
        sov.imomentXY/power(iSeeing, 2)*iKronWeight +
        sov.zmomentXY/power(zSeeing, 2)*zKronWeight + 
        sov.ymomentXY/power(ySeeing, 2)*yKronWeight)/nullif(
        gKronWeight + rKronWeight + iKronWeight + zKronWeight + yKronWeight, 0)
        as wwmomentXY,
       (sov.gmomentXX/power(gSeeing, 2)*gKronWeight + 
        sov.rmomentXX/power(rSeeing, 2)*rKronWeight + 
        sov.imomentXX/power(iSeeing, 2)*iKronWeight +
        sov.zmomentXX/power(zSeeing, 2)*zKronWeight + 
        sov.ymomentXX/power(ySeeing, 2)*yKronWeight)/nullif(
        gKronWeight + rKronWeight + iKronWeight + zKronWeight + yKronWeight, 0)
        as wwmomentXX,
       (sov.gKronRad/power(gSeeing, 1)*gKronWeight + 
        sov.rKronRad/power(rSeeing, 1)*rKronWeight + 
        sov.iKronRad/power(iSeeing, 1)*iKronWeight +
        sov.zKronRad/power(zSeeing, 1)*zKronWeight + 
        sov.yKronRad/power(ySeeing, 1)*yKronWeight)/nullif(
        gKronWeight + rKronWeight + iKronWeight + zKronWeight + yKronWeight, 0)
        as wwKronRad,
       (sov.gmomentRH/power(gSeeing, 0.5)*gKronWeight + 
        sov.rmomentRH/power(rSeeing, 0.5)*rKronWeight + 
        sov.imomentRH/power(iSeeing, 0.5)*iKronWeight +
        sov.zmomentRH/power(zSeeing, 0.5)*zKronWeight + 
        sov.ymomentRH/power(ySeeing, 0.5)*yKronWeight)/nullif(
        gKronWeight + rKronWeight + iKronWeight + zKronWeight + yKronWeight, 0)
        as wwmomentRH,
       (sov.gpsfChiSq*gKronWeight + sov.rpsfChiSq*rKronWeight + sov.ipsfChiSq*iKronWeight +
        sov.zpsfChiSq*zKronWeight + sov.ypsfChiSq*yKronWeight)/nullif(
        gKronWeight + rKronWeight + iKronWeight + zKronWeight + yKronWeight, 0)
        as wwpsfChiSq,
       (sov.gpsfLikelihood*gKronWeight + sov.rpsfLikelihood*rKronWeight + sov.ipsfLikelihood*iKronWeight +
        sov.zpsfLikelihood*zKronWeight + sov.ypsfLikelihood*yKronWeight)/nullif(
        gKronWeight + rKronWeight + iKronWeight + zKronWeight + yKronWeight, 0)
        as wwpsfLikelihood
        from mydb.intermediate1 as dummy1
join mydb.Xmatch1 x on dummy1.objid = x.objid
join stackobjectview as sov on dummy1.objid = sov.objid
join mydb.sdssSpecPhoto1_DR14 sdss on x.specobj_idx = sdss.specobj_idx
where gKronWeight + rKronWeight + iKronWeight + zKronWeight + yKronWeight > 0
and sov.primaryDetection = 1) dummy2

-- Query 9

select * into mydb.sdssSP_MLfeats from mydb.sdssSP1_MLfeats
union
(select * from mydb.sdssSP2_MLfeats
    union
    (select * from mydb.sdssSP3_MLfeats
        union
        select * from mydb.sdssSP4_MLfeats) 
    ) 